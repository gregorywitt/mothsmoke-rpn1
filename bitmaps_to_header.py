import os
import re
from PIL import Image, ImageOps

def sanitize_name(name):
    """Sanitize filename to be a valid C identifier."""
    name = re.sub(r'\W|^(?=\d)', '_', name)
    return name

def image_to_hex_bytes(img_path):
    """Convert a 1-bit image to a list of bytes (as integers)."""
    with Image.open(img_path) as img:
        img = img.rotate(90, expand = True)
        img = ImageOps.flip(img)
        img = ImageOps.invert(img)
        bw_img = img.convert("1")  # Convert to black & white (1-bit)
        pixels = list(bw_img.getdata())
        width, height = bw_img.size

        hex_bytes = []
        for y in range(height):
            for x in range(0, width, 8):
                byte = 0
                for bit in range(8):
                    if x + bit < width:
                        pixel = pixels[y * width + x + bit]
                        if pixel == 0:  # black = 1
                            byte |= (1 << (7 - bit))
                hex_bytes.append(byte)
        return hex_bytes, width, height

def process_directory(input_dir, output_file):
    total_bytes = 0
    with open(output_file, 'w') as out_file:
        out_file.write('// This file generated by bitmaps_to_header.py\n\n')
        out_file.write('// bitmaps heights must be multiple of 8\n')
        out_file.write('// bits scan top to bottom, left to right\n\n')
        for filename in sorted(os.listdir(input_dir)):
            if filename.lower().endswith('.png'):
                print(filename)
                name = os.path.splitext(filename)[0]
                array_name = sanitize_name(name)
                img_path = os.path.join(input_dir, filename)
                hex_bytes, width, height = image_to_hex_bytes(img_path)

                out_file.write(f'// {filename} - {width}x{height}\n')
                array_size = int(width * height / 8)
                out_file.write(f'int {array_name}_size = {array_size};\n')
                total_bytes += array_size
                out_file.write(f'const unsigned char {array_name}[] PROGMEM = {{\n    ')

                for i, byte in enumerate(hex_bytes):
                    is_last = (i == len(hex_bytes) - 1)
                    out_file.write(f'0x{byte:02X}')
                    if not is_last:
                        out_file.write(', ')
                        if (i + 1) % 12 == 0:
                            out_file.write('\n    ')
                out_file.write('\n};\n\n')
        out_file.write(f'\n// Total Bytes: {total_bytes}\n')

# === Configuration ===
input_directory = './bitmaps'      # Folder with PNGs
output_c_file = 'arduino/rpn_1/bitmaps.h'    # Output C file

process_directory(input_directory, output_c_file)
